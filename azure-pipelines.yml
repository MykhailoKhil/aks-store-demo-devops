trigger:
  branches:
    include:
      - main
  paths:
    include:
      - docker/**
      - kubernetes/**
      - terraform/**

variables:
  azureSubscription: 'dd2193da-276d-4686-b0e7-9212589a09ab'
  acrName: 'aksstoredemoregistry'
  acrLoginServer: '$(acrName).azurecr.io'
  resourcePrefix: 'aks-store-demo'
  aksResourceGroup: '$(resourcePrefix)-rg'
  aksClusterName: '$(resourcePrefix)-aks'
  imageTag: '$(Build.BuildId)'
  storeFrontImage: '$(acrLoginServer)/store-front:$(imageTag)'
  orderServiceImage: '$(acrLoginServer)/order-service:$(imageTag)'
  productServiceImage: '$(acrLoginServer)/product-service:$(imageTag)'
  terraformVersion: '1.5.7'

stages:

- stage: DeployInfrastructure
  displayName: 'Deploy Infrastructure with Terraform'
  jobs:
    - job: Terraform
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - task: AzureCLI@2
          displayName: 'Install Terraform'
          inputs:
            azureSubscription: '$(azureSubscription)'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              wget -q https://releases.hashicorp.com/terraform/$(terraformVersion)/terraform_$(terraformVersion)_linux_amd64.zip
              unzip -q terraform_$(terraformVersion)_linux_amd64.zip
              sudo mv terraform /usr/local/bin/
              terraform --version

        - task: AzureCLI@2
          displayName: 'Terraform Init & Apply'
          inputs:
            azureSubscription: '$(azureSubscription)'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
            inlineScript: |
              cat > backend.tf << EOF
              terraform {
                backend "azurerm" {
                  resource_group_name  = "$(aksResourceGroup)"
                  storage_account_name = "$(resourcePrefix)tfstate"
                  container_name       = "tfstate"
                  key                  = "terraform.tfstate"
                }
              }
              EOF
              terraform init
              terraform plan -out=tfplan
              terraform apply -auto-approve tfplan

- stage: BuildAndTest
  displayName: 'Build, Push, and Test Images'
  dependsOn: DeployInfrastructure
  jobs:
    - job: BuildPushTest
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - task: AzureCLI@2
          displayName: 'Get ACR Credentials'
          inputs:
            azureSubscription: '$(azureSubscription)'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              echo "##vso[task.setvariable variable=acrUsername]$(az acr credential show -n $(acrName) --query username -o tsv)"
              echo "##vso[task.setvariable variable=acrPassword]$(az acr credential show -n $(acrName) --query passwords[0].value -o tsv)"

        - script: |
            echo "$(acrPassword)" | docker login $(acrLoginServer) -u $(acrUsername) --password-stdin
          displayName: 'Docker Login to ACR'

        # Build & push all images
        - task: Docker@2
          displayName: 'Build Store Frontend'
          inputs:
            command: buildAndPush
            repository: '$(acrLoginServer)/store-front'
            dockerfile: 'docker/store-front/Dockerfile'
            buildContext: 'docker/store-front'
            tags: |
              $(imageTag)
              latest

        - task: Docker@2
          displayName: 'Build Order Service'
          inputs:
            command: buildAndPush
            repository: '$(acrLoginServer)/order-service'
            dockerfile: 'docker/order-service/Dockerfile'
            buildContext: 'docker/order-service'
            tags: |
              $(imageTag)
              latest

        - task: Docker@2
          displayName: 'Build Product Service'
          inputs:
            command: buildAndPush
            repository: '$(acrLoginServer)/product-service'
            dockerfile: 'docker/product-service/Dockerfile'
            buildContext: 'docker/product-service'
            tags: |
              $(imageTag)
              latest

        # Test containers sequentially
        - script: |
            docker run -d --name store-front -p 8080:8080 $(storeFrontImage)
            sleep 10
            curl -f http://localhost:8080/health || exit 1
            docker stop store-front && docker rm store-front
          displayName: 'Test Store Frontend'

        - script: |
            docker run -d --name order-service -p 3000:3000 \
              -e ORDER_QUEUE_HOSTNAME=localhost \
              -e ORDER_QUEUE_PORT=5672 \
              -e ORDER_QUEUE_USERNAME=guest \
              -e ORDER_QUEUE_PASSWORD=guest \
              -e FASTIFY_ADDRESS=0.0.0.0 \
              $(orderServiceImage)
            sleep 10
            curl -f http://localhost:3000/health || exit 1
            docker stop order-service && docker rm order-service
          displayName: 'Test Order Service'

        - script: |
            docker run -d --name product-service -p 3002:3002 $(productServiceImage)
            sleep 10
            curl -f http://localhost:3002/health || exit 1
            docker stop product-service && docker rm product-service
          displayName: 'Test Product Service'

- stage: DeployApplication
  displayName: 'Deploy Application to AKS'
  dependsOn: BuildAndTest
  jobs:
    - job: DeployToAKS
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - task: AzureCLI@2
          displayName: 'Get AKS Credentials'
          inputs:
            azureSubscription: '$(azureSubscription)'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              az aks get-credentials --resource-group $(aksResourceGroup) --name $(aksClusterName) --overwrite-existing

        - task: Kubernetes@1
          displayName: 'Deploy NGINX Ingress Controller'
          inputs:
            connectionType: 'None'
            command: 'apply'
            arguments: '-f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.2/deploy/static/provider/cloud/deploy.yaml'

        - task: Bash@3
          displayName: 'Update Kubernetes Manifests'
          inputs:
            targetType: 'inline'
            script: |
              cp $(System.DefaultWorkingDirectory)/kubernetes/aks-store.yaml $(System.DefaultWorkingDirectory)/kubernetes/aks-store-updated.yaml
              sed -i "s|image: ghcr.io/azure-samples/aks-store-demo/store-front:latest|image: $(storeFrontImage)|g" $(System.DefaultWorkingDirectory)/kubernetes/aks-store-updated.yaml
              sed -i "s|image: ghcr.io/azure-samples/aks-store-demo/order-service:latest|image: $(orderServiceImage)|g" $(System.DefaultWorkingDirectory)/kubernetes/aks-store-updated.yaml
              sed -i "s|image: ghcr.io/azure-samples/aks-store-demo/product-service:latest|image: $(productServiceImage)|g" $(System.DefaultWorkingDirectory)/kubernetes/aks-store-updated.yaml

        - task: Kubernetes@1
          displayName: 'Deploy AKS Store Demo'
          inputs:
            connectionType: 'None'
            command: 'apply'
            arguments: '-f $(System.DefaultWorkingDirectory)/kubernetes/aks-store-updated.yaml'

        - task: Kubernetes@1
          displayName: 'Deploy Ingress'
          inputs:
            connectionType: 'None'
            command: 'apply'
            arguments: '-f $(System.DefaultWorkingDirectory)/kubernetes/store-ingress.yaml'

        - task: Kubernetes@1
          displayName: 'Wait for Deployments'
          inputs:
            connectionType: 'None'
            command: 'rollout'
            arguments: 'status deployment/store-front deployment/order-service deployment/product-service --timeout=300s'

        - task: Kubernetes@1
          displayName: 'Verify Deployment'
          inputs:
            connectionType: 'None'
            command: 'get'
            arguments: 'pods,svc,ingress'
            outputFormat: 'yaml'
